{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\CreateForm.svelte",
    "..\\..\\Footer.svelte",
    "..\\..\\Header.svelte",
    "..\\..\\PollDetails.svelte",
    "..\\..\\PollList.svelte",
    "..\\..\\Button.svelte",
    "..\\..\\Card.svelte",
    "..\\..\\Tabs.svelte"
  ],
  "sourcesContent": [
    "<script>\n\t// components\n\timport Header from './components/Header.svelte';\n\timport Footer from './components/Footer.svelte';\n\t// create form\n\timport CreateForm from './components/CreateForm.svelte';\n\n\t// tabs\n\timport Tabs from './shared/Tabs.svelte';\n\n\timport PollList from './components/PollList.svelte';\n\n\t// tabs\n\tlet tabs = ['Current Polls', 'Add New Poll'];\n\tlet activeTab = 'Current Polls';\n\n\tconst tabChange = (e) => {\n\t\t// console.log(e.detail);\n\n\t\tactiveTab = e.detail;\n\t};\n\n\t// substituting data below with data from store\n\n\t// adding new polls\n\t// let polls = [{\n\t// \tid: 1,\n\t// \tquestion: 'JavaScript or Python?',\n\t// \tanswerA: 'JavaScript',\n\t// \tanswerB: 'Python',\n\t// \tvotesA: 17,\n\t// \tvotesB: 8\n\t// }];\n\n\t// const handleAdd = (e) => {\n\t// \tconst poll = e.detail;\n\n\t// \tpolls = [poll, ...polls];\n\t// \tconsole.log(polls);\n\n\t// \tactiveTab = 'Current Polls';\n\t// };\n\n\t// using store so we no longer need stuff above, just...\n\tconst handleAdd = (e) => {\n\t\tactiveTab = 'Current Polls';\n\t};\n\n\t// voting functionality (forwarded event)\n\t// const handleVote = (e) => {\n\t// \t// console.log(e.detail);\n\t// \tconst { id, option } = e.detail;\n\n\t// \tlet copiedPolls = [...polls];\n\n\t// \t// finding the poll that was clicked on / voted on\n\t// \tlet upvotedPoll = copiedPolls.find(poll => poll.id == id);\n\n\t// \t// upvoting option that was voted for\n\t// \tif (option === 'a') {\n\t// \t\tupvotedPoll.votesA++;\n\t// \t}\n\t// \tif (option === 'b') {\n\t// \t\tupvotedPoll.votesB++;\n\t// \t}\n\n\t// \tpolls = copiedPolls;\n\t// };\n\n\t// using store so we don't need handleVote here\n</script>\n\n<Header />\n\n<main>\n\t<!-- tabs -->\n\t<Tabs {activeTab} {tabs} on:tabChange={tabChange} />\n\n\t{#if activeTab === 'Current Polls'}\n\t\t<!-- <p>Polls list component goes here</p> -->\n\t\t<!-- <PollList {polls} on:vote={handleVote} /> -->\n\t\t<!-- now using data from store -->\n\t\t<!-- <PollList on:vote={handleVote} /> -->\n\t\t<!-- refactored code to use store and dat inside the componenet, \n\t\tno need to pass it here anymore-->\n\t\t<PollList />\n\t{:else if activeTab === 'Add New Poll'}\n\t\t<CreateForm on:addPoll={handleAdd} />\n\t{/if}\n</main>\n\n<Footer />\n\n<style>\n\tmain {\n\t\tmax-width: 50rem;\n\t\tmargin: 2rem auto;\n\t}\n</style>",
    "<script>\r\n    // importing store\r\n    import PollStore from '../stores/PollStore.js';\r\n\r\n    import Button from '../shared/Button.svelte';\r\n\r\n    // Adding new polls\r\n    import { createEventDispatcher} from 'svelte';\r\n    const dispatch = createEventDispatcher();\r\n\r\n    let fieldValues = {\r\n        question: '',\r\n        answerA: '',\r\n        answerB: ''\r\n    };\r\n\r\n    // validating form\r\n    let errorValues = {\r\n        question: '',\r\n        answerA: '',\r\n        answerB: ''\r\n    };\r\n\r\n    let valid = false;\r\n\r\n    const handleSubmit = () => {\r\n        // console.log(fieldValues);\r\n\r\n        // custom form validation\r\n        valid = true;\r\n\r\n        // validate question\r\n        // making sure that the question is at least 5 chars long, excluding spaces\r\n        if (fieldValues.question.trim().length < 5) {\r\n            valid = false;\r\n            errorValues.question = 'Question must be at least 5 characters long';\r\n        }\r\n        else {\r\n            errorValues.question = '';\r\n        }\r\n\r\n        // validate answer A\r\n        // making sure that the answer is at least 1 character\r\n        if (fieldValues.answerA.trim().length < 1) {\r\n            valid = false;\r\n            errorValues.answerA = 'Answer A cannot be empty';\r\n        }\r\n        else {\r\n            errorValues.answerA = '';\r\n        }\r\n\r\n        // validate answer B\r\n        if (fieldValues.answerB.trim().length < 1) {\r\n            valid = false;\r\n            errorValues.answerB = 'Answer B cannot be empty';\r\n        }\r\n        else {\r\n            errorValues.answerB = '';\r\n        }\r\n\r\n        if (valid) {\r\n            // console.log('Inputs are valid', fieldValues);\r\n\r\n            // adding new polls\r\n            let newPoll = {...fieldValues, votesA: 0, votesB: 0, id: Math.random()};\r\n\r\n            // updating data in store\r\n            PollStore.update(currentPolls => {\r\n                return [newPoll, ...currentPolls];\r\n            });\r\n\r\n            // dispatch('addPoll', newPoll);\r\n            // using store instead of passing data\r\n            dispatch('addPoll');\r\n        }\r\n    };\r\n</script>\r\n\r\n<!-- MockUp -->\r\n<form on:submit|preventDefault={handleSubmit}>\r\n    <div class=\"form-field\">\r\n        <label for=\"question\">Poll Question:</label>\r\n        <input type=\"text\" id=\"question\" bind:value={fieldValues.question}>\r\n        <!-- custom form validation -->\r\n        <div class=\"error\">{ errorValues.question }</div>\r\n    </div>\r\n    <div class=\"form-field\">\r\n        <label for=\"answer-a\">Answer A:</label>\r\n        <input type=\"text\" id=\"answer-a\" bind:value={fieldValues.answerA}>\r\n        <div class=\"error\">{ errorValues.answerA }</div>\r\n    </div>\r\n    <div class=\"form-field\">\r\n        <label for=\"answer-b\">Answer B:</label>\r\n        <input type=\"text\" id=\"answer-b\" bind:value={fieldValues.answerB}>\r\n        <div class=\"error\">{ errorValues.answerB }</div>\r\n    </div>\r\n\r\n    <!-- <Button type=\"secondary\" flat={true} inverse={true}>Add Poll</Button> -->\r\n    <Button type=\"secondary\" flat={true}>Add Poll</Button>\r\n</form>\r\n\r\n<style>\r\n    form {\r\n        width: 25rem;\r\n        margin: 0 auto;\r\n        text-align: center;\r\n    }\r\n    .form-field {\r\n        margin: 1rem auto;\r\n    }\r\n    input {\r\n        width: 100%;\r\n        border-radius: 6px;\r\n    }\r\n    label {\r\n        margin: .5rem auto;\r\n        text-align: left;\r\n    }\r\n    .error {\r\n        font-weight: bold;\r\n        font-size: .8rem;\r\n        color: coral;\r\n    }\r\n</style>",
    "<!-- MarkUp -->\r\n<footer>\r\n    <div class=\"copyright\">Copyright &copy; 2020 | Net Ninja</div>\r\n</footer>\r\n\r\n<style>\r\n    footer {\r\n        padding: 2rem;\r\n        text-align: center;\r\n    }\r\n    .copyright {\r\n        color: coral;\r\n        font-size: 1rem;\r\n        display: inline-block;\r\n        padding: 1.5rem;\r\n        border-top: 2px solid coral;\r\n    }\r\n</style>",
    "<!-- MarkUp -->\r\n<header>\r\n    <h1>\r\n        <img src=\"./img/logo.svg\" alt=\"Poll Ninja Logo\">\r\n    </h1>\r\n</header>\r\n\r\n<style>\r\n    header {\r\n        background: #242424;\r\n        padding: 1rem;\r\n    }\r\n    h1 {\r\n        margin: 0;\r\n        color: #eee;\r\n        text-align: center;\r\n    }\r\n    img {\r\n        max-width: 10rem;\r\n    }\r\n</style>",
    "<script>\r\n    // voting functionality\r\n    // import { createEventDispatcher} from 'svelte';\r\n    // not needed anymore when using store\r\n\r\n    // card compoennt\r\n    import Card from '../shared/Card.svelte';\r\n\r\n    // importing store\r\n    import PollStore from '../stores/PollStore.js';\r\n\r\n    // deleting polls\r\n    import Button from '../shared/Button.svelte';\r\n\r\n    export let poll;\r\n\r\n\t// tweens and animations\r\n\timport { tweened } from 'svelte/motion';\r\n\r\n    // const dispatch = createEventDispatcher();\r\n\r\n    // reactive values\r\n    $: totalVotes = poll.votesA + poll.votesB;\r\n    // vote bars\r\n    $: percentA = Math.floor(100 / totalVotes * poll.votesA) || 0;\r\n    $: percentB = Math.floor(100 / totalVotes * poll.votesB) || 0;\r\n    // adding default 0 for tweened if the value in Math ends up being NaN or undefined\r\n\r\n    // voting functionality\r\n    // const handleVote = (option, id) => {\r\n    //     // dispatch('vote', { option: option, id: id });\r\n    //     dispatch('vote', { option, id });\r\n    // };\r\n\r\n    // using store\r\n    const handleVote = (option, id) => {\r\n        // updating store\r\n        PollStore.update(currentPolls => {\r\n            let copiedPolls = [...currentPolls];\r\n\r\n            // finding the poll that was clicked on / voted on\r\n            let upvotedPoll = copiedPolls.find(poll => poll.id == id);\r\n\r\n            // upvoting option that was voted for\r\n            if (option === 'a') {\r\n                upvotedPoll.votesA++;\r\n            }\r\n            if (option === 'b') {\r\n                upvotedPoll.votesB++;\r\n            }\r\n\r\n            return copiedPolls;\r\n        });\r\n    };\r\n\r\n    // deleting a poll functionality\r\n    const handleDelete = (id) => {\r\n        PollStore.update(currentPolls => {\r\n            return currentPolls.filter(poll => poll.id != id);\r\n        });\r\n    };\r\n\r\n    // tween and animation\r\n    // tweened percentages\r\n    const tweenedPercentA = tweened(0);\r\n    const tweenedPercentB = tweened(0);\r\n\r\n    $:tweenedPercentA.set(percentA);\r\n    $:tweenedPercentB.set(percentB);\r\n    // $: console.log($tweenedPercentA, $tweenedPercentB);\r\n</script>\r\n\r\n<!-- MarkUp -->\r\n<!-- card component -->\r\n<Card>\r\n    <div class=\"poll\">\r\n        <h3>{ poll.question }</h3>\r\n        <p>Total votes: { totalVotes }</p>\r\n\r\n        <div class=\"answer\" on:click={()=> handleVote('a', poll.id)}>\r\n            <!-- <div class=\"percent percent-a\" style=\"width: {percentA}%\"></div> -->\r\n            <!-- tween and animtion -->\r\n            <div class=\"percent percent-a\" style=\"width: {$tweenedPercentA}%\"></div>\r\n            <span>{ poll.answerA } ({ poll.votesA })</span>\r\n        </div>\r\n        <div class=\"answer\" on:click={()=> handleVote('b', poll.id)}>\r\n            <!-- <div class=\"percent percent-b\" style=\"width: {percentB}%\"></div> -->\r\n            <!-- tween and animtion -->\r\n            <div class=\"percent percent-b\" style=\"width: {$tweenedPercentB}%\"></div>\r\n            <span>{ poll.answerB } ({ poll.votesB })</span>\r\n        </div>\r\n\r\n        <div class=\"delete\">\r\n            <!-- usrrounding handl function in an inline function to prevent invoking it automatically, since we are pass arguments in it -->\r\n            <Button flat={true} on:click={() => handleDelete(poll.id)}>Delete</Button>\r\n        </div>\r\n    </div>\r\n</Card>\r\n\r\n<style>\r\n    h3 {\r\n        margin: 0 auto;\r\n        color: cornflowerblue;\r\n    }\r\n    p {\r\n        margin: .5rem 0 1rem;\r\n        color: #bbb;\r\n        font-style: italic;\r\n    }\r\n    .answer {\r\n        background: #131313;\r\n        cursor: pointer;\r\n        margin: .8rem auto;\r\n        position: relative;\r\n        transition: all 250ms ease;\r\n    }\r\n        .answer:hover {\r\n            background: #000;\r\n        }\r\n    span {\r\n        display: inline-block;\r\n        padding: .5rem 1rem;\r\n    }\r\n    .percent {\r\n        height: 100%;\r\n        position: absolute;\r\n        box-sizing: border-box;\r\n    }\r\n        .percent-a {\r\n            border-left: 4px solid crimson;\r\n            background: rgba(237, 20, 61, .3);\r\n        }\r\n        .percent-b {\r\n            border-left: 4px solid lime;\r\n            background: rgba(0, 255, 0, .3);\r\n        }\r\n\r\n    .delete {\r\n        margin-top: 2rem;\r\n        text-align: center;\r\n    }\r\n</style>",
    "<script>\r\n    // transitions\r\n    import { fade, slide, scale } from 'svelte/transition';\r\n    // animation for smoothly reordering poll cards when one is deleted\r\n    import { flip } from 'svelte/animate';\r\n\r\n    // life cycle hooks\r\n    // import { onMount, onDestroy } from 'svelte';\r\n\r\n    // store\r\n    import PollStore from '../stores/PollStore.js';\r\n\r\n    // poll detail component\r\n    import PollDetails from './PollDetails.svelte';\r\n\r\n    // commenting out all life cycle methods because we will use automatic\r\n    // sub and unsub scription by refering PollStore store file\r\n\r\n    // export let polls = [];\r\n\r\n    // subscribing to data in store\r\n    // storing into a variable so that we can use it to unsubscribe later\r\n    // const unSub = PollStore.subscribe(data => {\r\n    //     polls = data;\r\n    // });\r\n\r\n    // onMount method (life cycle hook)\r\n    // on Mount life cycle hook happens when a component mount the DOM\r\n    // when it i injected into the DOM\r\n    // onMount(() => {\r\n    //     // maybe get data from data base\r\n    //     console.log('Component mounted');\r\n    // });\r\n\r\n    // onDestroy method (life cycle hook)\r\n    // onDestroy life cycle hook fires everytime the component is removed from the DOM\r\n    // onDestroy(() => {\r\n    //     // unsubscribe from the store\r\n    //     console.log('Component destroyed');\r\n    //     // unsubscribing from store\r\n    //     unSub();\r\n    // });\r\n</script>\r\n\r\n<!-- MarkUp -->\r\n<div class=\"poll-list\">\r\n    <!-- {#each polls as poll (poll.id)} -->\r\n    <!-- to make subscribe and unsubscribe automatic, \r\n    <!-- we replace pools variable with referance to store file --> \r\n    <!-- {#each $PollStore as poll (poll.id)} -->\r\n        <!-- <div>{poll.question}</div> -->\r\n\r\n        <!-- poll details component and voting functionality event forwarding --> \r\n        <!-- <PollDetails {poll} on:vote /> -->\r\n\r\n        <!-- using store and data in components, no need to pass it here anymore -->\r\n        <!-- transition makes it work in both ways, in and out -->\r\n        <!-- <div transition:fade> -->\r\n        <!-- to make it so that it animates only individual item, we add local -->\r\n        <!-- <div in:fade out:scale|local animate:flip={{duration: 200}}>\r\n            <PollDetails {poll} />\r\n        </div> -->\r\n    <!-- {/each} -->\r\n\r\n    <!-- animation was throwing an error if it was with something else in each block for some reason -->\r\n    <!-- An element that use the animate directive must be the sole child of a keyed each block -->\r\n    {#each $PollStore as poll (poll.id)}\r\n        <div in:fade out:scale|local animate:flip={{duration: 500}}>\r\n            <PollDetails {poll} />\r\n        </div>\r\n    {/each}\r\n</div>\r\n\r\n<style>\r\n    .poll-list {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-gap: 1.5rem;\r\n    }\r\n</style>",
    "<script>\r\n    export let type = 'primary';\r\n    export let flat = false;\r\n    export let inverse = false;\r\n</script>\r\n\r\n<!-- MarkUp -->\r\n<button class={type} class:flat={flat} class:inverse={inverse} on:click>\r\n    <slot></slot>\r\n</button>\r\n\r\n<style>\r\n    button {\r\n        border: 0;\r\n        cursor: pointer;\r\n        border-radius: 6px;\r\n        padding: .5rem 1rem;\r\n        font-weight: bold;\r\n        box-shadow: 3px 2px 4px #000;\r\n    }\r\n    .primary {\r\n        background: crimson;\r\n        color: #eee;\r\n    }\r\n    .secondary {\r\n        background: cornflowerblue;\r\n    }\r\n    .flat {\r\n        box-shadow: none;\r\n    }\r\n    .primary.inverse {\r\n        color: crimson;\r\n        background: #333;\r\n        border: 2px solid crimson;\r\n    }\r\n    .secondary.inverse {\r\n        color: cornflowerblue;\r\n        background: #333;\r\n        border: 2px solid cornflowerblue;\r\n    }\r\n</style>",
    "<!-- MarkUp -->\r\n<div class=\"card\">\r\n    <slot></slot>\r\n</div>\r\n\r\n<style>\r\n    .card {\r\n        background: #232323;\r\n        padding: 1.5rem;\r\n        border-radius: 6px;\r\n        box-shadow: 0 3px 5px #000;\r\n    }\r\n</style>",
    "<script>\r\n    // tabs\r\n    import { createEventDispatcher} from 'svelte';\r\n    const dispatch = createEventDispatcher();\r\n\r\n    export let tabs;\r\n    export let activeTab;\r\n</script>\r\n\r\n<div class=\"tabs\">\r\n    <ul>\r\n        {#each tabs as tab}\r\n            <!-- using inline function to prevent automatically invoked function -->\r\n            <li on:click={() => dispatch('tabChange', tab)}>\r\n                <div class:active={tab === activeTab} >{tab}</div>\r\n            </li>\r\n        {/each}\r\n    </ul>\r\n</div>\r\n\r\n<style>\r\n    .tabs {\r\n        margin-bottom: 2rem;\r\n    }\r\n    ul {\r\n        display: flex;\r\n        justify-content: center;\r\n        list-style-type: none;\r\n        padding: 0;\r\n    }\r\n    li {\r\n        margin: 0 1rem;\r\n        font-size: 1rem;\r\n        color: #ddd;\r\n        cursor: pointer;\r\n    }\r\n    .active {\r\n        color: coral;\r\n        border-bottom: 2px solid coral;\r\n        padding-bottom: .5rem;\r\n    }\r\n</style>\r\n\r\n<!-- this tabs compoenent is completelly reusable -->\r\n<!-- nothing is hardcoded in here -->"
  ],
  "names": [],
  "mappings": "AA8FC,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CAAC,IAAI,AAClB,CAAC;ACKE,IAAI,cAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,WAAW,cAAC,CAAC,AACT,MAAM,CAAE,IAAI,CAAC,IAAI,AACrB,CAAC,AACD,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,GAAG,AACtB,CAAC,AACD,KAAK,cAAC,CAAC,AACH,MAAM,CAAE,KAAK,CAAC,IAAI,CAClB,UAAU,CAAE,IAAI,AACpB,CAAC,AACD,MAAM,cAAC,CAAC,AACJ,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,KAAK,AAChB,CAAC;ACpHD,MAAM,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,UAAU,eAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,MAAM,CACf,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC/B,CAAC;ACRD,MAAM,cAAC,CAAC,AACJ,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,AACjB,CAAC,AACD,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,GAAG,cAAC,CAAC,AACD,SAAS,CAAE,KAAK,AACpB,CAAC;ACiFD,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,KAAK,CAAE,cAAc,AACzB,CAAC,AACD,CAAC,cAAC,CAAC,AACC,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CACpB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,OAAO,cAAC,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,KAAK,CAAC,IAAI,CAClB,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC9B,CAAC,AACG,qBAAO,MAAM,AAAC,CAAC,AACX,UAAU,CAAE,IAAI,AACpB,CAAC,AACL,IAAI,cAAC,CAAC,AACF,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,KAAK,CAAC,IAAI,AACvB,CAAC,AACD,QAAQ,cAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,UAAU,AAC1B,CAAC,AACG,UAAU,cAAC,CAAC,AACR,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC9B,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACrC,CAAC,AACD,UAAU,cAAC,CAAC,AACR,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAC3B,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,AACnC,CAAC,AAEL,OAAO,cAAC,CAAC,AACL,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,MAAM,AACtB,CAAC;AClED,UAAU,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,QAAQ,CAAE,MAAM,AACpB,CAAC;AClED,MAAM,eAAC,CAAC,AACJ,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,OAAO,CACf,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,KAAK,CAAC,IAAI,CACnB,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,AAChC,CAAC,AACD,QAAQ,eAAC,CAAC,AACN,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,IAAI,AACf,CAAC,AACD,UAAU,eAAC,CAAC,AACR,UAAU,CAAE,cAAc,AAC9B,CAAC,AACD,KAAK,eAAC,CAAC,AACH,UAAU,CAAE,IAAI,AACpB,CAAC,AACD,QAAQ,QAAQ,eAAC,CAAC,AACd,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC7B,CAAC,AACD,UAAU,QAAQ,eAAC,CAAC,AAChB,KAAK,CAAE,cAAc,CACrB,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,cAAc,AACpC,CAAC;ACjCD,KAAK,cAAC,CAAC,AACH,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,MAAM,CACf,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,AAC9B,CAAC;ACUD,KAAK,cAAC,CAAC,AACH,aAAa,CAAE,IAAI,AACvB,CAAC,AACD,EAAE,cAAC,CAAC,AACA,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,CAAC,AACd,CAAC,AACD,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AACnB,CAAC,AACD,OAAO,cAAC,CAAC,AACL,KAAK,CAAE,KAAK,CACZ,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAC9B,cAAc,CAAE,KAAK,AACzB,CAAC"
}